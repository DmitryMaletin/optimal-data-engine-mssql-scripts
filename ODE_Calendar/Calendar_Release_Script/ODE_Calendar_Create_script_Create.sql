/*
Deployment script for ODE_Calendar

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar ODE_Config "ODE_Config"
:setvar ODE_Vault "ODE_Vault"
:setvar DatabaseName "ODE_Calendar"
:setvar DefaultFilePrefix "ODE_Calendar"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [Stage]...';


GO
CREATE SCHEMA [Stage]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dbo].[dv_task_state]...';


GO
CREATE TABLE [dbo].[dv_task_state] (
    [task_state_key]         INT                IDENTITY (1, 1) NOT NULL,
    [source_table_key]       INT                NULL,
    [source_unique_name]     VARCHAR (128)      NULL,
    [object_key]             INT                NULL,
    [object_type]            VARCHAR (50)       NULL,
    [object_name]            VARCHAR (128)      NULL,
    [procedure_name]         VARCHAR (128)      NULL,
    [high_water_date]        DATETIMEOFFSET (7) NULL,
    [source_high_water_lsn]  BINARY (10)        NULL,
    [source_high_water_date] VARCHAR (50)       NULL,
    [task_start_datetime]    DATETIMEOFFSET (7) NULL,
    [task_end_datetime]      DATETIMEOFFSET (7) NULL,
    [rows_inserted]          INT                NULL,
    [rows_updated]           INT                NULL,
    [rows_deleted]           INT                NULL,
    [session_id]             INT                NULL,
    [run_key]                INT                NULL,
    [updated_by]             VARCHAR (128)      NULL,
    [update_date_time]       DATETIMEOFFSET (7) NULL,
    PRIMARY KEY CLUSTERED ([task_state_key] ASC)
);


GO
PRINT N'Creating [stage].[CalendarHolidays]...';


GO
CREATE TABLE [stage].[CalendarHolidays] (
    [dv_stage_date_time]          DATETIMEOFFSET (7) NULL,
    [DateKey]                     DATE               NULL,
    [HolidayDate]                 DATE               NULL,
    [HolidayName]                 NVARCHAR (50)      NULL,
    [NationalHolidayName]         NVARCHAR (50)      NULL,
    [NationalObservedHolidayName] NVARCHAR (50)      NULL,
    [RegionalHolidayName]         NVARCHAR (50)      NULL,
    [RegionalObservedHolidayName] NVARCHAR (50)      NULL
);


GO
PRINT N'Creating [stage].[CalendarFiscal]...';


GO
CREATE TABLE [stage].[CalendarFiscal] (
    [dv_stage_date_time]       DATETIMEOFFSET (7) NULL,
    [DateKey]                  DATE               NULL,
    [FiscalYearCode]           INT                NULL,
    [FiscalYearDescription]    VARCHAR (50)       NULL,
    [FiscalQuarterCode]        INT                NULL,
    [FiscalQuarterDescription] VARCHAR (50)       NULL,
    [FiscalQuarterYearCode]    INT                NULL,
    [FiscalMonthCode]          INT                NULL,
    [FiscalMonthYearCode]      INT                NULL
);


GO
PRINT N'Creating [stage].[Calendar]...';


GO
CREATE TABLE [stage].[Calendar] (
    [dv_stage_date_time]     DATETIMEOFFSET (7) NULL,
    [DateKey]                DATE               NULL,
    [DateFullName]           VARCHAR (50)       NULL,
    [FullDateAlternateKey]   DATE               NULL,
    [YearCode]               INT                NULL,
    [YearDescription]        NVARCHAR (50)      NULL,
    [QuarterCode]            INT                NULL,
    [QuarterDescription]     NVARCHAR (50)      NULL,
    [QuarterYearCode]        INT                NULL,
    [MonthNumberOfYearCode]  INT                NULL,
    [MonthYearCode]          INT                NULL,
    [MonthName]              NVARCHAR (30)      NULL,
    [MonthYearDescription]   NVARCHAR (100)     NULL,
    [MonthLocalisedString]   VARCHAR (50)       NULL,
    [DateLocalisedString]    VARCHAR (50)       NULL,
    [DayNumberOfMonth]       INT                NULL,
    [NumberOfDaysInTheMonth] INT                NULL,
    [DayNumberOfYear]        INT                NULL,
    [WeekDay]                INT                NULL,
    [WeekDayName]            NVARCHAR (30)      NULL,
    [IsWeekDayCode]          INT                NULL,
    [IsWeekDayDescription]   VARCHAR (10)       NULL
);


GO
PRINT N'Creating [Stage].[link_Calendar_Holidays]...';


GO
CREATE TABLE [Stage].[link_Calendar_Holidays] (
    [dv_stage_date_time] DATETIMEOFFSET (7) NULL,
    [HolidayDateKey]     DATE               NULL,
    [HolidayName]        NVARCHAR (50)      NULL,
    [DateKey]            DATE               NULL
);


GO
PRINT N'Creating unnamed constraint on [dbo].[dv_task_state]...';


GO
ALTER TABLE [dbo].[dv_task_state]
    ADD DEFAULT (suser_name()) FOR [updated_by];


GO
PRINT N'Creating unnamed constraint on [dbo].[dv_task_state]...';


GO
ALTER TABLE [dbo].[dv_task_state]
    ADD DEFAULT (sysdatetimeoffset()) FOR [update_date_time];


GO
PRINT N'Creating [dbo].[ufnClosestWeekDayToDate]...';


GO

  /*
      Name:                ufn_ClosestWeekDayToDate
      Purpose:             Calculate the closest specified day of the week to given date.
      Dependencies:        None
      Parameters:          @date DATETIME2(7) - Date to calculate from
                           @dayOfWeek SMALLINT - number represents the day of the week
      Outputs:             DATETIME2(7) - date of the calculated day closest to date
      History:
      WHO                  DATE                 DESCRIPTION
      --------------       ---------------      -----------------------------------------------------------------------------------------------
      Jonathan Sellar      8/7/2015             Initial

*/

CREATE FUNCTION [dbo].[ufnClosestWeekDayToDate]
(
   @date DATETIME2(7),
   @dayOfWeek SMALLINT
)
RETURNS DATETIME2(7)
AS
BEGIN
     
      DECLARE @result DATETIME2(7)
      DECLARE @offset SMALLINT

      SET @offSet = @dayOfWeek - DATEPART(dw, @date)

      IF @offSet > -4 SET @result = DATEADD(day, @offset, @date)
      ELSE IF @offSet = -5 SET @result =  DATEADD(day, (-@offset)-3, @date)
      ELSE SET @result = DATEADD(day, (-@offset)-1, @date)

      RETURN @result

END
GO
PRINT N'Creating [dbo].[ufnEasterSunday]...';


GO


/*
	Name:			ufnEasterSunday	
	Purpose:		Calculate the date of Easter Sunday for a give year.	
	Dependencies:	None	
	Parameters:		@year SMALLINT - Year as YYYY to calculate the date for.	
	Outputs:		DATETIME2(7) -  Date of Easter Sunday for given year.	
	Source:			https://gallery.technet.microsoft.com/scriptcenter/Calculate-Date-of-Eastern-36c624f9	
	History:
	WHO					DATE			DESCRIPTION
	--------------		---------------	-----------------------------------------------------------------------------------------------
	Jonathan Sellar		8 JULY 2015		Initial

*/
-- Calculate Date of Easter Sunday 
-- Function to Calculate the Date of Easter Sunday for a given year. 
-- Parameter: @year = Year to calculate the easter sunday for.  
--            The value must be between 1751 and 9999. 
-- Returns: The calculate easter sunday as a DateTime value. 
--          If the passed @year isn't valid then it returns NULL. 


CREATE FUNCTION [dbo].[ufnEasterSunday]
(
	@year SMALLINT
)
RETURNS DATETIME2(7) 
AS
BEGIN

    DECLARE @a SMALLINT, @b SMALLINT, @c SMALLINT, @d SMALLINT; 
    DECLARE @e SMALLINT, @o SMALLINT, @N SMALLINT, @M SMALLINT; 
    DECLARE @H1 SMALLINT, @H2 SMALLINT; 
  
    -- Validate @year parameter. 
    IF @year < 1753 OR @year > 9999 OR @year IS NULL 
        RETURN NULL; 
 
    -- Calculate easter sunday with Gauß algorithm. 
    SET @a  = @year % 19; 
    SET @b  = @year % 4; 
    SET @c  = @year % 7 
    SET @H1 = @year / 100; 
    SET @H2 = @year / 400; 
    SET @N = 4 + @H1 - @H2; 
    SET @M = 15 + @H1 - @H2 - ((8 * @H1 + 13) / 25); 
    SET @d = (19 * @a + @M) % 30; 
    SET @e = (2 * @b + 4 * @c + 6 * @d + @N) % 7; 
    SET @o = 22 + @d + @e; 
  
    -- Exceptions from the base rule. 
    IF @o = 57 
        SET @o = 50; 
    IF (@d = 28) AND (@e = 6) AND (@a > 10)  
        SET @o = 49; 
     
    RETURN(DATEADD(d, @o - 1, CONVERT(DATETIME2(7), CONVERT(CHAR(4), @year) + '0301', 112))); 

END
GO
PRINT N'Creating [dbo].[ufnWeekdayInMonth]...';


GO

/*
	Name:			   ufnWeekdayInMonth
	Purpose:		   Calculate the nth occurrence of a day within a given month.
	Dependencies:	   None
	Parameters:		   @date DATETIME2(7) - Date from the month to find day in
					   @dayOfWeek SMALLINT - number represents the day of the week
					   @nthWeekdayInMonth SMALLINT - number of occurrence
	Outputs:		   DATETIME2(7) - date of the calculated day.
	History:
	WHO				   DATE			DESCRIPTION
	--------------	   ---------------	-----------------------------------------------------------------------------------------------
	Jonathan Sellar	   8 JULY 2015		Initial

*/

-- =============================================
-- Description: Gets the nth occurrence of a given weekday in the month containing the specified date.
-- For @dayOfWeek, 1 = Sunday, 2 = Monday, 3 = Tuesday, 4 = Wednesday, 5 = Thursday, 6 = Friday, 7 = Saturday
-- =============================================

CREATE FUNCTION [dbo].[ufnWeekdayInMonth]
(
    @date DATETIME2(7),
    @dayOfWeek SMALLINT,
    @nthWeekdayInMonth SMALLINT
)
RETURNS DATETIME2(7)
AS
BEGIN
    DECLARE @beginMonth DATETIME2(7)
    DECLARE @offSet SMALLINT
    DECLARE @firstWeekdayOfMonth DATETIME2(7)
    DECLARE @result DATETIME2(7)

    SET @beginMonth = DATEADD(DAY, -DATEPART(DAY, @date) + 1, @date)
    SET @offSet = @dayOfWeek - DATEPART(dw, @beginMonth)

    IF (@offSet < 0)
    BEGIN
        SET @firstWeekdayOfMonth = DATEADD(d, 7 + @offSet, @beginMonth)
    END
    ELSE
    BEGIN
        SET @firstWeekdayOfMonth = DATEADD(d, @offSet, @beginMonth)
    END

    SET @result = DATEADD(WEEK, @nthWeekdayInMonth - 1, @firstWeekdayOfMonth)

    IF (NOT(MONTH(@beginMonth) = MONTH(@result)))
    BEGIN
        SET @result = NULL
    END

    RETURN @result
END
GO
PRINT N'Creating [dbo].[ufnMondayiseHoliday]...';


GO

/*
	Name:			    ufnMondayiseHoliday
	Purpose:		    Mondayised: When a public holiday falls on the weekend the day off work is observed the next non-holiday week day.
	Dependencies:	    None
	Parameters:		    @HolidayDate - Date to Mondayise
	Outputs:		    DATETIME2(7) - Mondayised date if required.
	History:
	WHO					DATE			DESCRIPTION
	--------------		---------------	-----------------------------------------------------------------------------------------------
	Jonathan Sellar		8 JULY 2015		Initial
	Kate Loguteva		24 JAN 2018     Added second check for double holidays

*/

CREATE FUNCTION [dbo].[ufnMondayiseHoliday]
(
	@HolidayDate DATETIME2(7)
)
RETURNS DATETIME2(7)
AS
BEGIN
	
	DECLARE @SaturdayOffset SMALLINT
	DECLARE @SundayOffset SMALLINT
	SET @SaturdayOffset = DATEPART(dw, '2015-07-04') --Known Saturday
	SET @SundayOffset = DATEPART(dw, '2015-07-05') --Known Sunday

	DECLARE @MondayisedHoliday DATETIME2(7)
	SET @MondayisedHoliday = @HolidayDate
	
	IF DATEPART(dw, @HolidayDate) = @SaturdayOffset SET @MondayisedHoliday = DATEADD(D, 2, @HolidayDate)
	IF DATEPART(dw, @HolidayDate) = @SundayOffset SET @MondayisedHoliday = DATEADD(D, 1, @HolidayDate)

	/* Check for double holidays - New Years and Christmas */
	IF (DATEPART(D, @HolidayDate) = 1 AND DATEPART(M, @HolidayDate) = 1 AND DATEPART(D, @MondayisedHoliday) = 2) SET @MondayisedHoliday = DATEADD(D, 1, @MondayisedHoliday)
	IF (DATEPART(D, @HolidayDate) = 25 AND DATEPART(M, @HolidayDate) = 12 AND DATEPART(D, @MondayisedHoliday) = 26) SET @MondayisedHoliday = DATEADD(D, 1, @MondayisedHoliday)
	
	/* Second check for double holidays - Day after New Year and Boxing day */
	IF (DATEPART(D, @HolidayDate) = 2 AND DATEPART(M, @HolidayDate) = 1 AND DATEPART(D, @MondayisedHoliday) = 3) SET @MondayisedHoliday = DATEADD(D, 1, @MondayisedHoliday)
	IF (DATEPART(D, @HolidayDate) = 26 AND DATEPART(M, @HolidayDate) = 12 AND DATEPART(D, @MondayisedHoliday) = 27) SET @MondayisedHoliday = DATEADD(D, 1, @MondayisedHoliday)

	RETURN 	@MondayisedHoliday

END
GO
PRINT N'Creating [dbo].[utfnPublicHolidays]...';


GO

/*
	Name:			    utfnPublicHolidays
	Purpose:		    Generate a table of all the NZ public holidays for the given year.	
	Dependencies:	    ufnMondayiseHoliday, ufnWeekdayInMonth, ufnEasterSunday
	Parameters:		    @year SMALLINT - number represent year as YYYY
	Outputs:		    TABLE (HolidayDate DATETIME2(7), HolidayDay NVARCHAR(10), HolidayName NVARCHAR(50), NationalHoliday CHAR(1),
						ObservedDate DATETIME2(7), ObservedDay NVARCHAR(10)
	History:
	WHO					DATE			DESCRIPTION
	--------------		---------------	-----------------------------------------------------------------------------------------------
	Jonathan Sellar		8 JULY 2015		Initial
	Brian Bradley		2 MAR  2017     Replaced ufnDatefromParts with the standard SQL function DateFromParts.

*/

CREATE FUNCTION [dbo].[utfnPublicHolidays]
(
	@year int
)
RETURNS @returntable TABLE
(
	HolidayDate DATETIME2(7),
	HolidayDay NVARCHAR(10),
	HolidayName NVARCHAR(50),
	NationalHoliday CHAR(1),
	ObservedDate DATETIME2(7),
	ObservedDay NVARCHAR(10)
)
AS
BEGIN
	
	DECLARE @insertDates TABLE (insertdate DATETIME2(7), datedesc NVARCHAR(50))
	DECLARE @EasterSunday DATETIME2(7)
	DECLARE @LabourDay DATETIME2(7)
	SET @LabourDay = dbo.ufnWeekdayInMonth(DateFromParts(@year,10,1), 2, 4)
	SET @EasterSunday = dbo.ufnEasterSunday(@year)

	--Insert Static Dates
	INSERT @insertDates(insertdate, datedesc)
	VALUES	(DateFromParts(@year, 1,1), 'New Year''s Day'), 
			(DateFromParts(@year, 1,2), 'Day after New Year''s Day'), 
			(DateFromParts(@year, 12,25), 'Christmas Day'), 
			(DateFromParts(@year, 12,26), 'Boxing Day')

	INSERT @returntable
	SELECT 
		insertdate, 
		DATENAME(dw, insertdate), 
		datedesc, 
		'Y', 
		dbo.ufnMondayiseHoliday(insertdate), 
		DATENAME(dw, dbo.ufnMondayiseHoliday(insertdate))
	FROM @insertDates

	DELETE @insertDates

	INSERT @insertDates(insertdate, datedesc)
	VALUES	(DateFromParts(@year, 2,6), 'Waitangi Day'),
			(DateFromParts(@year, 4,25), 'ANZAC Day')
	
	--January 1st 2014 onwards: Mondayised Anzac and Waitangi
	IF @year <= 2013 BEGIN
		INSERT @returntable
		SELECT  
			insertdate, 
			DATENAME(dw, insertdate), 
			datedesc, 
			'Y', 
			insertdate, 
			DATENAME(dw, insertdate)
		FROM @insertDates

	END
	ELSE BEGIN
		INSERT @returntable
		SELECT 
			insertdate, 
			DATENAME(dw, insertdate), 
			datedesc, 
			'Y', 
			dbo.ufnMondayiseHoliday(insertdate), 
			DATENAME(dw, dbo.ufnMondayiseHoliday(insertdate))
		FROM @insertDates

	END

	DELETE @insertDates

	--Feast Days
	INSERT @returntable
	VALUES	
		(DATEADD(day, -2, @EasterSunday),
		'Friday', 
		'Good Friday', 
		'Y', 
		DATEADD(day, -2, @EasterSunday),
		'Friday'),
		(DATEADD(day, 1, @EasterSunday),
		 'Monday', 
		 'Easter Monday', 
		 'Y', 
		 DATEADD(day, 1, @EasterSunday), 
		 'Monday')

	--Moveable Dates
	INSERT @insertDates(insertdate, datedesc)
	VALUES (dbo.ufnWeekdayInMonth(DateFromParts(@year,6,1), 2, 1), 'Queen''s Birthday'),
		   (@LabourDay, 'Labour Day')

	INSERT @returntable
	SELECT	
		insertdate, 
		DATENAME(dw, insertdate),
		datedesc, 
		'Y', 
		insertdate, 
		DATENAME(dw, insertdate)
	FROM @insertDates

	DELETE @insertDates

----------------------------------------------------------------------------------------------------
	--New Zealand Provencial Holidays
	--Provencial Holidays that are xth Monday of Month
	INSERT @insertDates
	VALUES 
		--Taranaki Anniversary Day is the second Monday in March
		(dbo.ufnWeekdayInMonth(DateFromParts(@year,3,1), 2, 2), 'Taranaki Anniversary'),
		
		--South Canterbury Anniversary Day is the fourth Monday in September
		(dbo.ufnWeekdayInMonth(DateFromParts(@year,9,1), 2, 4), 'South Canterbury Anniversary'),

		--Canterbury Show Day celebration is the second Friday after the first Tuesday in November
		(DATEADD(day, 10, dbo.ufnWeekdayInMonth(DateFromParts(@year,11,1), 3, 1)), 'Canterbury Anniversary'),

	--Provencial Holidays relative to Other Holidays 
		--Hawke's Bay Anniversary Day is held on the Friday before Labour Day
		(DATEADD(day, -3, @LabourDay), 'Hawke''s Bay Anniversary'),

		--Marlborough Anniversary is the first Monday after Labour Day (fourth Monday in October)
		(DATEADD(day, 7, @LabourDay), 'Marlborough Anniversary'),

	--Provencial Holidays using closest day to date
		--Wellington Anniversary Day is the Monday that falls closest to 22 January
		(dbo.ufnClosestWeekDayToDate(DateFromParts(@year, 1, 22), 2), 'Wellington Anniversary'),

		--Auckland Anniversary Day holiday usually falls on the Monday closest to 29 January
		(dbo.ufnClosestWeekDayToDate(DateFromParts(@year, 1, 29), 2), 'Auckland Anniversary'),

		--Nelson Anniversary Day holiday usually falls on the Monday closest to 1 Feburary
		(dbo.ufnClosestWeekDayToDate(DateFromParts(@year, 2, 1), 2), 'Nelson Anniversary'),
		
		--Otago Anniversary Day is the Monday that falls closest to 23 March
		(dbo.ufnClosestWeekDayToDate(DateFromParts(@year, 3, 23), 2), 'Otago Anniversary'),

		--Westland Anniversary Day Monday closest to 1 December
		(dbo.ufnClosestWeekDayToDate(DateFromParts(@year, 12, 1), 2), 'Westland Anniversary'),

		--Chatham Islands Anniversary Day is the Monday closest to 30 November
		(dbo.ufnClosestWeekDayToDate(DateFromParts(@year, 11, 30), 2), 'Chatham Islands Anniversary')

	IF @year > 2011 BEGIN
		INSERT @insertDates
		VALUES --Southland Anniversary Day is celebrated on Easter Tuesday since DEC-2011
				(DATEADD(day, 2, @EasterSunday), 'Southland Anniversary')
	END
	ELSE BEGIN
		INSERT @insertDates
		VALUES --Southland Anniversary Day was celebrated Monday closest to 17 January prior to DEC-2011
			(DATEADD(day, 2, @EasterSunday), 'Southland Anniversary')
	END
	
	INSERT @returntable
	SELECT	
		insertdate, 
		DATENAME(dw, insertdate), 
		datedesc, 
		'N', 
		insertdate, 
		DATENAME(dw, insertdate)
	FROM @insertDates 

	RETURN
END
GO
PRINT N'Creating [dbo].[utfnPublicHolidaysForYearRange]...';


GO

/*
	Name:			utfnPublicHolidaysForYearRange
	Purpose:		Generate a table of all the NZ public holidays for a range of years.	
	SQL Version:	any
	Dependencies:	utfnPublicHolidays	
	Parameters:		@StartYear SMALLINT - number representing first year of range as YYYY
					@EndYear SMALLINT - number representing last year of range as YYYY
	Outputs:		TABLE (HolidayDate DATETIME2(7), HolidayDay NVARCHAR(10), HolidayName NVARCHAR(50), NationalHoliday CHAR(1),
						ObservedDate DATETIME2(7), ObservedDay NVARCHAR(10), , PublicHolidayRegion NVARCHAR(50))
	History:
	WHO					DATE			DESCRIPTION
	--------------		---------------	-----------------------------------------------------------------------------------------------
	Jonathan Sellar		8 JULY 2015		Initial

*/

CREATE FUNCTION [dbo].[utfnPublicHolidaysForYearRange]
(
	@StartYear SMALLINT, 
	@EndYear SMALLINT
)
	RETURNS @resulttable TABLE
(
	HolidayDate DATETIME2(7),
	HolidayDay NVARCHAR(10),
	HolidayName NVARCHAR(50),
	NationalHoliday CHAR(1),
	ObservedDate DATETIME2(7),
	ObservedDay NVARCHAR(10)
)
AS
BEGIN 

	DECLARE @year SMALLINT
	SET @year = @StartYear

	WHILE @YEAR <= @EndYear BEGIN

		INSERT INTO @resulttable
		SELECT HolidayDate, HolidayDay, HolidayName, NationalHoliday, ObservedDate, ObservedDay
		FROM [dbo].[utfnPublicHolidays](@YEAR)
		ORDER BY HolidayDate

		SET @YEAR = @YEAR + 1
	END

	RETURN

END
GO
PRINT N'Creating [stage].[usp_Calendar]...';


GO

CREATE PROCEDURE [stage].[usp_Calendar]
AS
BEGIN
  /*
      Name:                stage.usp_Calendar
      Purpose:             Calculates the core Calendar Attributes for a set range of dates.
      Dependencies:        None
      Parameters:          None
      Outputs:             Table [stage].[Calendar]
      History:
      WHO                  DATE               DESCRIPTION
      --------------       ---------------    -----------------------------------------------------------------------------------------------
      Brian Bradley        21/02/2017         Initial

*/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = object_id('[stage].[Calendar]') AND type = 'U') 
DROP TABLE [stage].[Calendar]

DECLARE @CurrentDate				date
	   ,@FirstDate					date
	   ,@YearsInAdvance				int
	   ,@LastDate					date
DECLARE @WeeklyHolidays				table ([WeekDay] int) -- weekday, sunday is 1 and saturday is 7

-- Set the first date of the calendar to start
SET @FirstDate='1900-01-01'
-- Set the number of years in advance of the current year calendar should be populated. Default is 10
SET @YearsInAdvance = 10
-----------------------------------------------------------------------
SET @LastDate = DATEFROMPARTS(YEAR(GETDATE()) + @YearsInAdvance,12,31)
SET @CurrentDate = @FirstDate

-- insert weekly holidays
INSERT into @WeeklyHolidays([WeekDay]) values(1) -- Sunday
INSERT into @WeeklyHolidays([WeekDay]) values(7) -- Saturday

CREATE TABLE [stage].[Calendar]
([dv_stage_date_time] DATETIMEOFFSET(7) NULL
,[DateKey] DATE NULL
,[DateFullName] VARCHAR(50) NULL
,[FullDateAlternateKey] DATE NULL
,[YearCode] INT NULL
,[YearDescription] NVARCHAR(50) NULL
,[QuarterCode] INT NULL
,[QuarterDescription] NVARCHAR(50) NULL
,[QuarterYearCode] INT NULL
,[MonthNumberOfYearCode] INT NULL
,[MonthYearCode] INT NULL
,[MonthName] NVARCHAR(30) NULL
,[MonthYearDescription] NVARCHAR(100) NULL
,[MonthLocalisedString] VARCHAR(50) NULL
,[DateLocalisedString] VARCHAR(50) NULL
,[DayNumberOfMonth] INT NULL
,[NumberOfDaysInTheMonth] INT NULL
,[DayNumberOfYear] INT NULL
,[WeekDay] INT NULL
,[WeekDayName] NVARCHAR(30) NULL
,[IsWeekDayCode] INT NULL
,[IsWeekDayDescription] VARCHAR(10) NULL
)

WHILE(@CurrentDate<=@LastDate)
	BEGIN
	INSERT INTO [stage].[Calendar]
	SELECT
	[dv_stage_datetime]				= sysdatetimeoffset(),
	[DateKey]						= @CurrentDate, 
	[DateFullName]					= convert(varchar(50),@CurrentDate,106),
	[FullDateAlternateKey]			=  @CurrentDate,
	[YearCode]						= datepart(year,@CurrentDate),
	[YearDescription]				= 'CY '+datename(year,@CurrentDate),
	[QuarterCode]					= datepart(QUARTER,@CurrentDate),
	[QuarterDescription]			= 'Q'+datename(QUARTER,@CurrentDate),
	[QuarterYearCode]				= convert(int,datename(year,@CurrentDate)+datename(QUARTER,@CurrentDate)),
	[MonthNumberOfYearCode]			= datepart(month,@CurrentDate),
	[MonthYearCode]					= convert(int,datename(year,@CurrentDate)+right('0'+convert(varchar(2),datepart(month,@CurrentDate)),2)),
	[MonthName]						= datename(month,@CurrentDate),
	[MonthYearDescription]			= datename(month,@CurrentDate)+' '+datename(year,@CurrentDate),
	[MonthLocalisedString]			= substring(convert(varchar(max),@CurrentDate,103),charindex('/',convert(varchar(max),@CurrentDate,103),1)+1,len(convert(varchar(max),@CurrentDate,103))-charindex('/',convert(varchar(max),@CurrentDate,103),1)),
	[DateLocalisedString]			= convert(varchar(max),@CurrentDate,103),
	[DayNumberOfMonth]				= datepart(day,@CurrentDate),
	[NumberOfDaysInTheMonth]		= datepart(day,EOMONTH(@CurrentDate)),
	[DayNumberOfYear]				= datepart(DAYOFYEAR,@CurrentDate),
	[WeekDay]						= datepart(WEEKDAY,@CurrentDate),
	[WeekDayName]					= datename(WEEKDAY,@CurrentDate),
	[IsWeekDayCode]					= case when datepart(WEEKDAY,@CurrentDate) in (select [weekday] from @WeeklyHolidays) then 0 else 1 end ,
	[IsWeekDayDescription]			= case when datepart(WEEKDAY,@CurrentDate) in (select [weekday] from @WeeklyHolidays) then 'Weekend' else 'Weekday' end

	SET @CurrentDate=dateadd(day,1,@CurrentDate)
	END
END
GO
PRINT N'Creating [stage].[usp_link_Calendar_Holidays]...';


GO

CREATE PROCEDURE [stage].[usp_link_Calendar_Holidays]
AS
BEGIN

  /*
      Name:                stage.usp_link_Calendar_Holidays
      Purpose:             Links Holidays to the Calendar (there can be multiple holidays on one calendar day).
      Dependencies:        None
      Parameters:          None
      Outputs:             Table [stage].[link_Calendar_Holidays]
      History:
      WHO                  DATE               DESCRIPTION
      --------------       ---------------    -----------------------------------------------------------------------------------------------
      Brian Bradley        21/02/2017         Initial

*/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = object_id('[stage].[link_Calendar_Holidays]') AND type = 'U') 
DROP TABLE [stage].[link_Calendar_Holidays]

CREATE TABLE [stage].[link_Calendar_Holidays]
(
[dv_stage_date_time] DATETIMEOFFSET(7) NULL
,[HolidayDateKey] DATE NULL
,[HolidayName] NVARCHAR(50) NULL
,[DateKey] DATE NULL
)

INSERT  INTO [stage].[link_Calendar_Holidays]
SELECT DISTINCT 
       sysdatetimeoffset()
	  ,[DateKey] 
      ,[HolidayName]
	  ,[DateKey]
  FROM [$(ODE_Vault)].[sat].[s_CalendarHolidays]
  WHERE [dv_row_is_current] = 1 AND [dv_is_tombstone] = 0
END
GO
PRINT N'Creating [stage].[usp_CalendarHolidays]...';


GO

CREATE PROCEDURE [stage].[usp_CalendarHolidays]
AS
BEGIN

  /*
      Name:                stage.usp_CalendarHolidays
      Purpose:             Generate a table of all the NZ public holidays for a range of years.
      Dependencies:        utfnPublicHolidaysForYearRange
      Parameters:          None
      Outputs:             Table [stage].[CalendarHolidays]
      History:
      WHO                  DATE               DESCRIPTION
      --------------       ---------------    -----------------------------------------------------------------------------------------------
      Brian Bradley        21/02/2017         Initial

*/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = object_id('[stage].[CalendarHolidays]') AND type = 'U') 
DROP TABLE [stage].[CalendarHolidays]

DECLARE @FirstDate					date
       ,@FirstDateInt				int
	   ,@YearsInAdvance				int
	   ,@LastDate					date
	   ,@LastDateInt				int

-- Set the first date of the calendar to start
SET @FirstDate='1900-01-01'
-- Set the number of years in advance of the current year calendar should be populated. Default is 10
SET @YearsInAdvance = 10
SET @LastDate=DATEFROMPARTS(YEAR(GETDATE()) + @YearsInAdvance,12,31)

SELECT @FirstDateInt = cast(convert(char(4),@FirstDate, 112) as int)
      ,@LastDateInt  = cast(convert(char(4),@LastDate, 112) as int)

CREATE TABLE [stage].[CalendarHolidays]
(
[dv_stage_date_time] DATETIMEOFFSET(7) NULL
,[DateKey] DATE NULL
,[HolidayDate] DATE NULL
,[HolidayName] NVARCHAR(50) NULL
,[NationalHolidayName] NVARCHAR(50) NULL
,[NationalObservedHolidayName] NVARCHAR(50) NULL
,[RegionalHolidayName] NVARCHAR(50) NULL
,[RegionalObservedHolidayName] NVARCHAR(50) NULL
)

;WITH wBaseSet AS (
SELECT 
	 [DateKey]		=  convert(date, [HolidayDate])
	,[HolidayDate]	=  convert(date, [HolidayDate])
	,[HolidayName]
	,[NationalHoliday]
FROM [dbo].[utfnPublicHolidaysForYearRange] (@FirstDateInt, @LastDateInt)
UNION
SELECT 
	 [DateKey]		=  convert(date, [ObservedDate])  
	,[HolidayDate]	=  convert(date, [HolidayDate])
	,[HolidayName]
	,[NationalHoliday]
FROM [dbo].[utfnPublicHolidaysForYearRange] (@FirstDateInt, @LastDateInt)
)
,wFullSet AS(
SELECT 
	[DateKey],	
	[HolidayDate],
	[HolidayName],
	[NationalHolidayName]		= case	when NationalHoliday = 'Y'
										then case when HolidayDate = DateKey
							            then HolidayName
										end
							      end,
	NationalObservedHolidayName = case when NationalHoliday = 'Y'
									   then case when HolidayDate <> DateKey
							           then HolidayName
									   end
							      end,
	RegionalHolidayName			= case when NationalHoliday = 'N'
	                                   then case when HolidayDate = DateKey
							           then HolidayName
									   end
							      end,
	RegionalObservedHolidayName = case when NationalHoliday = 'N'
	                                   then case when HolidayDate <> DateKey
							           then HolidayName
									   end
							      end
from wBaseSet
)

INSERT INTO [stage].[CalendarHolidays]
SELECT      sysdatetimeoffset()
		   ,[DateKey]
		   ,[HolidayDate]
           ,[HolidayName]
           ,[NationalHolidayName]
           ,[NationalObservedHolidayName]
           ,[RegionalHolidayName]
           ,[RegionalObservedHolidayName]
FROM wFullSet

END
GO
PRINT N'Creating [stage].[usp_CalendarFiscal]...';


GO

CREATE PROCEDURE [stage].[usp_CalendarFiscal]
AS
BEGIN
  /*
      Name:               stage.usp_CalendarFiscal
      Purpose:            Calculates the core Calendar Attributes for a set range of dates.
      Dependencies:       None
      Parameters:         None
      Outputs:            Table [stage].[CalendarFiscal]
      History:
      WHO                 DATE               DESCRIPTION
      --------------      ---------------    -----------------------------------------------------------------------------------------------
      Brian Bradley       21/02/2017         Initial

*/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = object_id('[stage].[CalendarFiscal]') AND type = 'U') 
DROP TABLE [stage].[CalendarFiscal]

DECLARE @CurrentDate				date
	   ,@FirstDate					date
	   ,@YearsInAdvance				int
	   ,@LastDate					date
	   ,@FiscalYearStartMonth		int
DECLARE @WeeklyHolidays				table ([WeekDay] int) -- weekday, sunday is 1 and saturday is 7

-- Set the first date of the calendar to start
SET @FirstDate='1900-01-01'
-- Set the number of years in advance of the current year calendar should be populated. Default is 10
SET @YearsInAdvance = 10
-- Set the month of fiscal year to start. Default is 7 - July
SET @FiscalYearStartMonth = 7
-----------------------------------------------------------------------
SET @LastDate=DATEFROMPARTS(YEAR(GETDATE()) + @YearsInAdvance,12,31)
SET @CurrentDate=@FirstDate

CREATE TABLE [stage].[CalendarFiscal]
([dv_stage_date_time] DATETIMEOFFSET(7) NULL
,[DateKey] DATE NULL
,[FiscalYearCode] INT NULL		
,[FiscalYearDescription] VARCHAR(50) NULL	
,[FiscalQuarterCode] INT NULL		
,[FiscalQuarterDescription] VARCHAR(50) NULL
,[FiscalQuarterYearCode] INT NULL	
,[FiscalMonthCode] INT NULL
,[FiscalMonthYearCode] INT NULL)

WHILE(@CurrentDate<=@LastDate)
	BEGIN
	INSERT INTO [stage].[CalendarFiscal]
	SELECT
	[dv_stage_datetime]				= sysdatetimeoffset(),
	[DateKey]						= @CurrentDate, 
	[FiscalYearCode]				= case when month(@CurrentDate)<@FiscalYearStartMonth 
										   then year(@CurrentDate) 
										   else year(@CurrentDate)+1 
										   end,
	[FiscalYearDescription] 		= 'FY ' + cast(case when month(@CurrentDate)<@FiscalYearStartMonth 
														then year(@CurrentDate) 
														else year(@CurrentDate)+1 
														end as varchar),
	[FiscalQuarterCode]				= ceiling(convert(float,(case when month(@CurrentDate)=13-@FiscalYearStartMonth 
																  then 12 
																  else ((@FiscalYearStartMonth-1)+month(@CurrentDate))%12 
																  end))/3),
	[FiscalQuarterDescription]		= 'FQ ' + cast(ceiling(convert(float,(case when month(@CurrentDate)=13-@FiscalYearStartMonth 
																			   then 12 
																			   else ((@FiscalYearStartMonth-1)+month(@CurrentDate))%12 
																			   end))/3) as varchar),
	[FiscalQuarterYearCode]			= convert(varchar(4),case when month(@CurrentDate)<@FiscalYearStartMonth then year(@CurrentDate) else year(@CurrentDate)+1 end)
									+ convert(varchar(1),ceiling(convert(float,(case when month(@CurrentDate)=13-@FiscalYearStartMonth then 12 else ((@FiscalYearStartMonth-1)+month(@CurrentDate))%12 end))/3)),
	[FiscalMonthCode]				= case when month(@CurrentDate)=13-@FiscalYearStartMonth then 12 else ((@FiscalYearStartMonth-1)+month(@CurrentDate))%12 end,
	[FiscalMonthYearCode]			= convert(varchar(4),case when month(@CurrentDate)<@FiscalYearStartMonth then year(@CurrentDate) else year(@CurrentDate)+1 end)
									+ right('0'+convert(varchar(2),case when month(@CurrentDate)=13-@FiscalYearStartMonth then 12 else ((@FiscalYearStartMonth-1)+month(@CurrentDate))%12 end),2)

	SET @CurrentDate=dateadd(day,1,@CurrentDate)
	END
END
GO
/*
Calendar configuration and Reporting script
*/



DECLARE @ReleaseKey INT
, @StageDatebaseKey INT
, @StageSchemaKey INT
, @abbn VARCHAR(4)
, @HubKey INT
, @SatelliteKey INT
, @SourceTableKey INT
, @HubKeyColumnKeyCAL INT
, @HubSourceColumnKey1 INT
, @HubKeyColumnKeyHOL1 INT
, @HubKeyColumnKeyHOL2 INT
, @HubSourceColumnKey2 INT
, @LinkCol1 INT
, @LinkCol2 INT
, @LinkCol3 INT
, @LinkKey INT
, @LinkKeyColumnKey1 INT
, @LinkKeyColumnKey2 INT

--Insert new release number. If such release number exists, it will be reused.
IF (SELECT COUNT(*)
FROM [$(ODE_Config)].[dv_release].[dv_release_master]
WHERE [release_number] = 2 ) = 0
EXEC [$(ODE_Config)].[dv_release].[dv_release_master_insert]
@Release_number = 2
,@Release_description = 'Adding Calendar ensemble'

--Insert Sysgen source system if it doesn't exist yet
IF (SELECT COUNT(*)
FROM [$(ODE_Config)].[dbo].[dv_source_system]
WHERE [source_system_name] = 'Sysgen' ) = 0
EXEC [$(ODE_Config)].[dbo].[dv_source_system_insert]
@source_system_name = 'Sysgen'
,@source_database_name = 'Sysgen'
,@package_folder = NULL
,@package_project = NULL
,@project_connection_name = NULL
,@is_retired = 0
,@release_number = 2

--Check if this is a new stage database. If so, add it to config
IF (SELECT COUNT(*)
FROM [$(ODE_Config)].[dbo].[dv_stage_database]
WHERE [stage_database_name] = '$(DatabaseName)') = 0
EXEC [$(ODE_Config)].[dbo].[dv_stage_database_insert]
@stage_database_name = '$(DatabaseName)'
,@stage_connection_name = NULL
,@is_retired = 0
,@release_number = 2

SELECT @StageDatebaseKey = [stage_database_key]
FROM [$(ODE_Config)].[dbo].[dv_stage_database]
WHERE [stage_database_name] = '$(DatabaseName)'

--Check if stage schema exists in stage database. If not, add it to cnfig
IF (SELECT COUNT(*)
FROM [$(ODE_Config)].[dbo].[dv_stage_schema]
WHERE [stage_database_key] = @StageDatebaseKey
AND [stage_schema_name] = 'stage') = 0
EXEC [$(ODE_Config)].[dbo].[dv_stage_schema_insert]
@stage_database_key = @StageDatebaseKey
,@stage_schema_name = 'stage'
,@is_retired = 0
,@release_number = 2

-----------------------------------------------------------
--Calendar ensemble

--Insert Calendar hub
SELECT @abbn = [$(ODE_Config)].[dbo].[fn_get_next_abbreviation]()
EXECUTE @HubKey = [$(ODE_Config)].[dbo].[dv_hub_insert] 
@hub_name = 'Calendar'
,@hub_abbreviation = @abbn
,@hub_schema = 'hub'
,@hub_database = '$(ODE_Vault)'
,@is_compressed = 0
,@is_retired = 0
,@release_number = 2

-- Configure Calendar satellite
SELECT @abbn = [$(ODE_Config)].[dbo].[fn_get_next_abbreviation]()
EXECUTE @SatelliteKey = [$(ODE_Config)].[dbo].[dv_satellite_insert] 
@hub_key = @HubKey
,@link_key = 0
,@link_hub_satellite_flag = 'H'
,@satellite_name = 'Calendar'
,@satellite_abbreviation = @abbn
,@satellite_schema = 'sat'
,@satellite_database = '$(ODE_Vault)'
,@duplicate_removal_threshold = 0
,@is_columnstore = 0
,@is_compressed	= 0
,@is_retired = 0
,@release_number = 2

--Populate source table from stage table
EXECUTE [$(ODE_Config)].[dv_config].[dv_populate_source_table_columns] 
   @vault_stage_database = '$(DatabaseName)'
  ,@vault_stage_schema = 'stage'
  ,@vault_stage_table = 'Calendar'
  ,@vault_source_unique_name = 'Calendar'
  ,@vault_stage_table_load_type = 'Full'
  ,@vault_source_system_name = 'Sysgen'
  ,@vault_source_table_schema = ''
  ,@vault_source_table_name = ''
  ,@vault_release_number = 2
  ,@vault_rerun_column_insert = 0
  ,@is_columnstore = 0
  ,@is_compressed = 0

SELECT @SourceTableKey = source_table_key 
FROM [$(ODE_Config)].[dbo].[dv_source_table] 
WHERE [source_unique_name] = 'Calendar'

 -- Add source version
EXECUTE  [$(ODE_Config)].[dbo].[dv_source_version_insert] 
   @source_table_key = @SourceTableKey
  ,@source_version = 1
  ,@source_type	= 'BespokeProc'
  ,@source_procedure_name = 'usp_Calendar'
  ,@source_filter = NULL
  ,@pass_load_type_to_proc = 0
  ,@is_current = 1
  ,@release_number = 2

--Hook the Source Columns up to the Satellite
EXECUTE [$(ODE_Config)].[dv_config].[dv_populate_satellite_columns] 
   @vault_source_unique_name = 'Calendar'
  ,@vault_satellite_name = 'Calendar'
  ,@vault_release_number = 2
  ,@vault_rerun_satellite_column_insert = 0

-- Hub Key
EXECUTE @HubKeyColumnKeyCAL = [$(ODE_Config)].[dbo].[dv_hub_key_insert] 
 @hub_key = @HubKey
,@hub_key_column_name = 'DateKey'
,@hub_key_column_type = 'date'
,@hub_key_column_length = 3
,@hub_key_column_precision = 10
,@hub_key_column_scale = 0
,@hub_key_Collation_Name = NULL
,@hub_key_ordinal_position = 1
,@release_number = 2

SELECT  @HubSourceColumnKey1 = c.[column_key]
FROM [$(ODE_Config)].[dbo].[dv_source_table] st 
inner join [$(ODE_Config)].[dbo].[dv_column] c	on c.[table_key] = st.[source_table_key]
WHERE st.source_table_key = @SourceTableKey
and c.column_name = 'DateKey'

EXECUTE [$(ODE_Config)].[dbo].[dv_hub_column_insert] 
@hub_key_column_key	= @HubKeyColumnKeyCAL
,@link_key_column_key = NULL
,@column_key = @HubSourceColumnKey1
,@release_number = 2

DELETE FROM [$(ODE_Config)].[dbo].[dv_column]
FROM [$(ODE_Config)].[dbo].[dv_column]
WHERE [table_key] = @SourceTableKey
AND [column_name] = 'dv_stage_date_time'

DELETE FROM [$(ODE_Config)].[dbo].[dv_satellite_column]
FROM [$(ODE_Config)].[dbo].[dv_satellite_column]
WHERE [satellite_key] = @SatelliteKey
AND [column_name] = 'dv_stage_date_time'

---------------------------------------------------
--CalendarFiscal satellite
SELECT @abbn = [$(ODE_Config)].[dbo].[fn_get_next_abbreviation]()
EXECUTE @SatelliteKey = [$(ODE_Config)].[dbo].[dv_satellite_insert] 
@hub_key = @HubKey
,@link_key = 0
,@link_hub_satellite_flag = 'H'
,@satellite_name = 'CalendarFiscal'
,@satellite_abbreviation = @abbn
,@satellite_schema = 'sat'
,@satellite_database = '$(ODE_Vault)'
,@duplicate_removal_threshold = 0
,@is_columnstore = 0
,@is_compressed	= 0
,@is_retired = 0
,@release_number = 2

--Populate source table from stage table
EXECUTE [$(ODE_Config)].[dv_config].[dv_populate_source_table_columns] 
   @vault_stage_database = '$(DatabaseName)'
  ,@vault_stage_schema = 'stage'
  ,@vault_stage_table = 'CalendarFiscal'
  ,@vault_source_unique_name = 'CalendarFiscal'
  ,@vault_stage_table_load_type = 'Full'
  ,@vault_source_system_name = 'Sysgen'
  ,@vault_source_table_schema = ''
  ,@vault_source_table_name = ''
  ,@vault_release_number = 2
  ,@vault_rerun_column_insert = 0
  ,@is_columnstore = 0
  ,@is_compressed = 0

SELECT @SourceTableKey = source_table_key 
FROM [$(ODE_Config)].[dbo].[dv_source_table] 
WHERE [source_unique_name] = 'CalendarFiscal'

 -- Add source version
EXECUTE   [$(ODE_Config)].[dbo].[dv_source_version_insert] 
   @source_table_key = @SourceTableKey
  ,@source_version = 1
  ,@source_type	= 'BespokeProc'
  ,@source_procedure_name = 'usp_CalendarFiscal'
  ,@source_filter = NULL
  ,@pass_load_type_to_proc = 0
  ,@is_current = 1
  ,@release_number = 2

--Hook the Source Columns up to the Satellite
EXECUTE [$(ODE_Config)].[dv_config].[dv_populate_satellite_columns] 
   @vault_source_unique_name = 'CalendarFiscal'
  ,@vault_satellite_name = 'CalendarFiscal'
  ,@vault_release_number = 2
  ,@vault_rerun_satellite_column_insert = 0

SELECT  @HubSourceColumnKey1 = c.[column_key]
FROM [$(ODE_Config)].[dbo].[dv_source_table] st 
inner join [$(ODE_Config)].[dbo].[dv_column] c	on c.[table_key] = st.[source_table_key]
WHERE st.source_table_key = @SourceTableKey
and c.column_name = 'DateKey'

EXECUTE [$(ODE_Config)].[dbo].[dv_hub_column_insert] 
@hub_key_column_key	= @HubKeyColumnKeyCAL
,@link_key_column_key = NULL
,@column_key = @HubSourceColumnKey1
,@release_number = 2

DELETE FROM [$(ODE_Config)].[dbo].[dv_column]
FROM [$(ODE_Config)].[dbo].[dv_column]
WHERE [table_key] = @SourceTableKey
AND [column_name] = 'dv_stage_date_time'

DELETE FROM [$(ODE_Config)].[dbo].[dv_satellite_column]
FROM [$(ODE_Config)].[dbo].[dv_satellite_column]
WHERE [satellite_key] = @SatelliteKey
AND [column_name] = 'dv_stage_date_time'
----------------------------------------------
--Calendar holidays ensemle
--Insert hub
SELECT @abbn = [$(ODE_Config)].[dbo].[fn_get_next_abbreviation]()
EXECUTE @HubKey = [$(ODE_Config)].[dbo].[dv_hub_insert] 
@hub_name = 'CalendarHolidays'
,@hub_abbreviation = @abbn
,@hub_schema = 'hub'
,@hub_database = '$(ODE_Vault)'
,@is_compressed = 0
,@is_retired = 0
,@release_number = 2

-- Configure Calendar holidays satellite
SELECT @abbn = [$(ODE_Config)].[dbo].[fn_get_next_abbreviation]()
EXECUTE @SatelliteKey = [$(ODE_Config)].[dbo].[dv_satellite_insert] 
@hub_key = @HubKey
,@link_key = 0
,@link_hub_satellite_flag = 'H'
,@satellite_name = 'CalendarHolidays'
,@satellite_abbreviation = @abbn
,@satellite_schema = 'sat'
,@satellite_database = '$(ODE_Vault)'
,@duplicate_removal_threshold = 0
,@is_columnstore = 0
,@is_compressed	= 0
,@is_retired = 0
,@release_number = 2

--Populate source table from stage table
EXECUTE [$(ODE_Config)].[dv_config].[dv_populate_source_table_columns] 
   @vault_stage_database = '$(DatabaseName)'
  ,@vault_stage_schema = 'stage'
  ,@vault_stage_table = 'CalendarHolidays'
  ,@vault_source_unique_name = 'CalendarHolidays'
  ,@vault_stage_table_load_type = 'Full'
  ,@vault_source_system_name = 'Sysgen'
  ,@vault_source_table_schema = ''
  ,@vault_source_table_name = ''
  ,@vault_release_number = 2
  ,@vault_rerun_column_insert = 0
  ,@is_columnstore = 0
  ,@is_compressed = 0

SELECT @SourceTableKey = source_table_key 
FROM [$(ODE_Config)].[dbo].[dv_source_table] 
WHERE [source_unique_name] = 'CalendarHolidays'

 -- Add source version
EXECUTE  [$(ODE_Config)].[dbo].[dv_source_version_insert] 
   @source_table_key = @SourceTableKey
  ,@source_version = 1
  ,@source_type	= 'BespokeProc'
  ,@source_procedure_name = 'usp_CalendarHolidays'
  ,@source_filter = NULL
  ,@pass_load_type_to_proc = 0
  ,@is_current = 1
  ,@release_number = 2

--Hook the Source Columns up to the Satellite
EXECUTE [$(ODE_Config)].[dv_config].[dv_populate_satellite_columns] 
   @vault_source_unique_name = 'CalendarHolidays'
  ,@vault_satellite_name = 'CalendarHolidays'
  ,@vault_release_number = 2
  ,@vault_rerun_satellite_column_insert = 0

-- Hub Key
EXECUTE @HubKeyColumnKeyHOL1 = [$(ODE_Config)].[dbo].[dv_hub_key_insert] 
 @hub_key = @HubKey
,@hub_key_column_name = 'DateKey'
,@hub_key_column_type = 'varchar'
,@hub_key_column_length = 128
,@hub_key_column_precision = 0
,@hub_key_column_scale = 0
,@hub_key_Collation_Name = NULL
,@hub_key_ordinal_position = 1
,@release_number = 2

SELECT  @HubSourceColumnKey1 = c.[column_key]
FROM [$(ODE_Config)].[dbo].[dv_source_table] st 
inner join [$(ODE_Config)].[dbo].[dv_column] c	on c.[table_key] = st.[source_table_key]
WHERE st.source_table_key = @SourceTableKey
and c.column_name = 'DateKey'

EXECUTE [$(ODE_Config)].[dbo].[dv_hub_column_insert] 
@hub_key_column_key	= @HubKeyColumnKeyHOL1
,@link_key_column_key = NULL
,@column_key = @HubSourceColumnKey1
,@release_number = 2

EXECUTE @HubKeyColumnKeyHOL2 = [$(ODE_Config)].[dbo].[dv_hub_key_insert] 
 @hub_key = @HubKey
,@hub_key_column_name = 'HolidayName'
,@hub_key_column_type = 'varchar'
,@hub_key_column_length = 128
,@hub_key_column_precision = 00
,@hub_key_column_scale = 0
,@hub_key_Collation_Name = NULL
,@hub_key_ordinal_position = 2
,@release_number = 2

SELECT  @HubSourceColumnKey2 = c.[column_key]
FROM [$(ODE_Config)].[dbo].[dv_source_table] st 
inner join [$(ODE_Config)].[dbo].[dv_column] c	on c.[table_key] = st.[source_table_key]
WHERE st.source_table_key = @SourceTableKey
and c.column_name = 'HolidayName'

EXECUTE [$(ODE_Config)].[dbo].[dv_hub_column_insert] 
@hub_key_column_key	= @HubKeyColumnKeyHOL2
,@link_key_column_key = NULL
,@column_key = @HubSourceColumnKey2
,@release_number = 2

DELETE FROM [$(ODE_Config)].[dbo].[dv_column]
FROM [$(ODE_Config)].[dbo].[dv_column]
WHERE [table_key] = @SourceTableKey
AND [column_name] = 'dv_stage_date_time'

DELETE FROM [$(ODE_Config)].[dbo].[dv_satellite_column]
FROM [$(ODE_Config)].[dbo].[dv_satellite_column]
WHERE [satellite_key] = @SatelliteKey
AND [column_name] = 'dv_stage_date_time'

-------------------------------------------------
-- Link between Calendar and Holiday

SELECT @abbn = [$(ODE_Config)].[dbo].[fn_get_next_abbreviation]()
EXECUTE @LinkKey = [$(ODE_Config)].[dbo].[dv_link_insert] 
@link_name = 'Calendar_Holidays'
,@link_abbreviation = @abbn
,@link_schema = 'lnk'
,@link_database = '$(ODE_Vault)'
,@is_compressed = 0
,@is_retired = 0
,@release_number = 2

SELECT @abbn = [$(ODE_Config)].[dbo].[fn_get_next_abbreviation]()
EXECUTE @SatelliteKey = [$(ODE_Config)].[dbo].[dv_satellite_insert] 
@hub_key = 0
,@link_key = @LinkKey
,@link_hub_satellite_flag = 'L'
,@satellite_name = 'link_Calendar_Holidays'
,@satellite_abbreviation = @abbn
,@satellite_schema = 'sat'
,@satellite_database = '$(ODE_Vault)'
,@duplicate_removal_threshold = 0
,@is_columnstore = 0
,@is_compressed	= 0
,@is_retired = 0
,@release_number = 2

EXECUTE  @LinkKeyColumnKey1 = [$(ODE_Config)].[dbo].[dv_link_key_insert] 
@link_key = @LinkKey
,@link_key_column_name = 'Calendar'
,@release_number = 2

EXECUTE  @LinkKeyColumnKey2 = [$(ODE_Config)].[dbo].[dv_link_key_insert] 
@link_key = @LinkKey
,@link_key_column_name = 'CalendarHolidays'
,@release_number = 2

 EXECUTE [$(ODE_Config)].[dv_config].[dv_populate_source_table_columns] 
   @vault_stage_database = '$(DatabaseName)'
  ,@vault_stage_schema = 'stage'
  ,@vault_stage_table = 'link_Calendar_Holidays'
  ,@vault_source_unique_name = 'link_Calendar_Holidays'
  ,@vault_stage_table_load_type = 'Full'
  ,@vault_source_system_name = 'Sysgen'
  ,@vault_source_table_schema = ''
  ,@vault_source_table_name = ''
  ,@vault_release_number = 2
  ,@vault_rerun_column_insert = 0
  ,@is_columnstore = 0
  ,@is_compressed = 0

SELECT @SourceTableKey = source_table_key 
FROM [$(ODE_Config)].[dbo].[dv_source_table] 
WHERE [source_unique_name] = 'link_Calendar_Holidays'

 -- Add source version
EXECUTE  [$(ODE_Config)].[dbo].[dv_source_version_insert] 
   @source_table_key = @SourceTableKey
  ,@source_version = 1
  ,@source_type	= 'BespokeProc'
  ,@source_procedure_name = 'usp_link_Calendar_Holidays'
  ,@source_filter = NULL
  ,@pass_load_type_to_proc = 0
  ,@is_current = 1
  ,@release_number = 2

--Hook the Source Columns up to the Satellite
EXECUTE [$(ODE_Config)].[dv_config].[dv_populate_satellite_columns] 
   @vault_source_unique_name = 'link_Calendar_Holidays'
  ,@vault_satellite_name = 'link_Calendar_Holidays'
  ,@vault_release_number = 2
  ,@vault_rerun_satellite_column_insert = 0

SELECT @LinkCol1 = column_key
FROM [$(ODE_Config)].[dbo].[dv_column]
WHERE [table_key] = @SourceTableKey
AND [column_name] = 'DateKey'

SELECT @LinkCol2 = column_key
FROM [$(ODE_Config)].[dbo].[dv_column]
WHERE [table_key] = @SourceTableKey
AND [column_name] = 'HolidayDateKey'

SELECT @LinkCol3 = column_key
FROM [$(ODE_Config)].[dbo].[dv_column]
WHERE [table_key] = @SourceTableKey
AND [column_name] = 'HolidayName'

EXECUTE [$(ODE_Config)].[dbo].[dv_hub_column_insert] 
@hub_key_column_key	= @HubKeyColumnKeyCAL
,@link_key_column_key = @LinkKeyColumnKey1
,@column_key = @LinkCol1
,@release_number = 2

EXECUTE [$(ODE_Config)].[dbo].[dv_hub_column_insert] 
@hub_key_column_key	= @HubKeyColumnKeyHOL1
,@link_key_column_key = @LinkKeyColumnKey2
,@column_key = @LinkCol2
,@release_number = 2

EXECUTE [$(ODE_Config)].[dbo].[dv_hub_column_insert] 
@hub_key_column_key	= @HubKeyColumnKeyHOL2
,@link_key_column_key = @LinkKeyColumnKey2
,@column_key = @LinkCol3
,@release_number = 2

DELETE FROM [$(ODE_Config)].[dbo].[dv_column]
FROM [$(ODE_Config)].[dbo].[dv_column]
WHERE [table_key] = @SourceTableKey
AND [column_name] = 'dv_stage_date_time'

DELETE FROM [$(ODE_Config)].[dbo].[dv_satellite_column]
FROM [$(ODE_Config)].[dbo].[dv_satellite_column]
WHERE [satellite_key] = @SatelliteKey
AND [column_name] = 'dv_stage_date_time'

--------------------------------------------------------
--Calendar scheduling
-- Schedule hierarchy
EXECUTE [$(ODE_Config)].[dv_scheduler].[dv_source_table_hierarchy_insert]
@source_unique_name = 'link_Calendar_Holidays'
,@prior_source_unique_name = 'CalendarHolidays'
,@release_number = 2

-- Schedule the whole calendar in separate schedule
EXECUTE [$(ODE_Config)].[dv_scheduler].[dv_schedule_insert] 
@schedule_name = 'Load_Calendar'
,@schedule_description = 'Populates Calendar ensemble'
,@schedule_frequency = 'Manual'
,@release_number = 2

EXECUTE [$(ODE_Config)].[dv_scheduler].[dv_schedule_source_table_insert] 
@schedule_name = 'Load_Calendar'
,@source_unique_name = 'Calendar'
,@source_table_load_type = 'Full'
,@priority = 'Low'
,@queue = 'Agent001'
,@release_number = 2

EXECUTE [$(ODE_Config)].[dv_scheduler].[dv_schedule_source_table_insert] 
@schedule_name = 'Load_Calendar'
,@source_unique_name = 'CalendarFiscal'
,@source_table_load_type = 'Full'
,@priority = 'Low'
,@queue = 'Agent001'
,@release_number = 2

EXECUTE [$(ODE_Config)].[dv_scheduler].[dv_schedule_source_table_insert] 
@schedule_name = 'Load_Calendar'
,@source_unique_name = 'CalendarHolidays'
,@source_table_load_type = 'Full'
,@priority = 'Low'
,@queue = 'Agent001'
,@release_number = 2

EXECUTE [$(ODE_Config)].[dv_scheduler].[dv_schedule_source_table_insert] 
@schedule_name = 'Load_Calendar'
,@source_unique_name = 'link_Calendar_Holidays'
,@source_table_load_type = 'Full'
,@priority = 'Low'
,@queue = 'Agent001'
,@release_number = 2
GO
-------------------------------------------------------------------------------------
-- Create physical tables in the Vault
EXECUTE [$(ODE_Config)].[dbo].[dv_create_hub_table] '$(ODE_Vault)', 'Calendar', 'N'
EXECUTE [$(ODE_Config)].[dbo].[dv_create_hub_table] '$(ODE_Vault)','CalendarHolidays', 'N'
EXECUTE [$(ODE_Config)].[dbo].[dv_create_link_table] '$(ODE_Vault)','Calendar_Holidays', 'N'
EXECUTE [$(ODE_Config)].[dbo].[dv_create_sat_table] '$(ODE_Vault)','Calendar', 'N'
EXECUTE [$(ODE_Config)].[dbo].[dv_create_sat_table] '$(ODE_Vault)','CalendarFiscal', 'N'
EXECUTE [$(ODE_Config)].[dbo].[dv_create_sat_table] '$(ODE_Vault)','CalendarHolidays', 'N'
EXECUTE [$(ODE_Config)].[dbo].[dv_create_sat_table] '$(ODE_Vault)','link_Calendar_Holidays', 'N'

GO

-----------------------------------------------------------------------------------

-- Reporting view. It will be created in the Vault database by default. Move it to your reporting database or remove completely if not needed
USE [$(ODE_Vault)]
GO

CREATE VIEW [Calendar]
AS
WITH 
--------HUBS
  hCalendar			AS (SELECT * FROM [$(ODE_Vault)].[hub].[h_Calendar])
 ,hCalendarHolidays AS (SELECT * FROM [$(ODE_Vault)].[hub].[h_CalendarHolidays])
--------LINKS:
 ,lCalendarHolidays AS  (SELECT l.l_Calendar_Holidays_key, l.h_Calendar_key, l.h_CalendarHolidays_key 
                         FROM [$(ODE_Vault)].[lnk].[l_Calendar_Holidays] l
						 INNER JOIN [$(ODE_Vault)].[sat].[s_link_Calendar_Holidays] s on s.[l_Calendar_Holidays_key] = l.[l_Calendar_Holidays_key]
						 WHERE s.dv_row_is_current = 1 AND s.dv_is_tombstone = 0)
--------SATELLITES
 ,sCalendar			AS (SELECT * FROM [$(ODE_Vault)].[sat].[s_Calendar] WHERE dv_row_is_current = 1 AND dv_is_tombstone = 0)
 ,sFiscal			AS (SELECT * FROM [$(ODE_Vault)].[sat].[s_CalendarFiscal] WHERE dv_row_is_current = 1 AND dv_is_tombstone = 0)
 ,sCalendarHolidays AS (SELECT * FROM [$(ODE_Vault)].[sat].[s_CalendarHolidays] WHERE dv_row_is_current = 1 AND dv_is_tombstone = 0)
--------Current Fiscal Year
 ,wCurFiscalYear AS (SELECT sFiscal.FiscalYearCode
                       FROM hCalendar
					   LEFT JOIN sFiscal on sFiscal.h_Calendar_key = hCalendar.h_Calendar_key
					   WHERE hCalendar.DateKey = cast(getdate() as date)
					   )
 ,wLinkedHolidays AS (SELECT lCalendarHolidays.h_Calendar_key
							,sCalendarHolidays.HolidayDate	
							,sCalendarHolidays.HolidayName	
							,sCalendarHolidays.NationalHolidayName	
							,sCalendarHolidays.NationalObservedHolidayName	
							,sCalendarHolidays.RegionalHolidayName	
							,sCalendarHolidays.RegionalObservedHolidayName
					   FROM lCalendarHolidays
					   INNER JOIN sCalendarHolidays on sCalendarHolidays.h_CalendarHolidays_key = lCalendarHolidays.h_CalendarHolidays_key)
 ,wFlatHolidays AS (
select [h_Calendar_key]
 	  ,[NationalHolidays] = STUFF((SELECT N', ' +  [NationalHolidayName]
						FROM wLinkedHolidays AS p2
						WHERE p2.[h_Calendar_key] = p.[h_Calendar_key]
						ORDER BY [NationalHolidayName]
						FOR XML PATH(N'')), 1, 2, N'')
      ,[NationalObservedHolidays] = STUFF((SELECT N', ' +  [NationalObservedHolidayName]
						FROM wLinkedHolidays AS p2
						WHERE p2.[h_Calendar_key] = p.[h_Calendar_key]
						ORDER BY [NationalObservedHolidayName]
						FOR XML PATH(N'')), 1, 2, N'')
	  ,[RegionalHolidays] = STUFF((SELECT N', ' +  [RegionalHolidayName]
						FROM wLinkedHolidays AS p2
						WHERE p2.[h_Calendar_key] = p.[h_Calendar_key]
						ORDER BY [RegionalHolidayName]
						FOR XML PATH(N'')), 1, 2, N'')
      ,[RegionalObservedHolidays] = STUFF((SELECT N', ' +  [RegionalObservedHolidayName]
						FROM wLinkedHolidays AS p2
						WHERE p2.[h_Calendar_key] = p.[h_Calendar_key]
						ORDER BY [regionalObservedHolidayName]
						FOR XML PATH(N'')), 1, 2, N'')
FROM wLinkedHolidays AS p
GROUP BY [h_Calendar_key])
SELECT DateCode = cast(replace(hCalendar.[DateKey], '-', '') as int)
	  ,hCalendar.[DateKey]
      ,sCalendar.[DateFullName]      
      ,sCalendar.[DateLocalisedString]
      ,sCalendar.[DayNumberOfMonth]
      ,sCalendar.[DayNumberOfYear]
      ,sCalendar.[FullDateAlternateKey]
      ,sCalendar.[IsWeekDayCode]
      ,sCalendar.[IsWeekDayDescription]
      ,sCalendar.[MonthLocalisedString]
      ,sCalendar.[MonthName]
      ,sCalendar.[MonthNumberOfYearCode]
      ,sCalendar.[MonthYearCode]
      ,sCalendar.[MonthYearDescription]
      ,sCalendar.[NumberOfDaysInTheMonth]
      ,sCalendar.[QuarterCode]
      ,sCalendar.[QuarterDescription]
      ,sCalendar.[QuarterYearCode]
      ,sCalendar.[WeekDay]
      ,sCalendar.[WeekDayName]
      ,sCalendar.[YearCode]
      ,sCalendar.[YearDescription]
	  ,ABS(DATEDIFF(Year ,getdate(),hCalendar.[DateKey])) as [YearOffset]
	  ,ABS(DATEDIFF(Month,getdate(),hCalendar.[DateKey])) as [MonthOffset]
	  ,ABS(DATEDIFF(Day  ,getdate(),hCalendar.[DateKey])) as [DayOffset]
	  ,sFiscal.[FiscalYearCode]
	  ,sFiscal.[FiscalYearDescription]
	  ,sFiscal.[FiscalQuarterCode]
	  ,sFiscal.[FiscalQuarterDescription]
	  ,sFiscal.[FiscalQuarterYearCode]
	  ,sFiscal.[FiscalMonthCode]
	  ,sFiscal.[FiscalMonthYearCode]
	  ,ABS(sFiscal.[FiscalYearCode] - wCurFiscalYear.[FiscalYearCode]) as [FiscalYearOffset]
	  ,wFlatHolidays.[NationalHolidays]
	  ,wFlatHolidays.[NationalObservedHolidays]
	  ,wFlatHolidays.[RegionalHolidays]
	  ,wFlatHolidays.[RegionalObservedHolidays]
  FROM hCalendar
  LEFT JOIN sCalendar		on sCalendar.[h_Calendar_key]		= hCalendar.[h_Calendar_key]
  LEFT JOIN sFiscal			on sFiscal.[h_Calendar_key]			= hCalendar.[h_Calendar_key]
  LEFT JOIN wFlatHolidays	on wFlatHolidays.[h_Calendar_key]	= hCalendar.[h_Calendar_key]
  CROSS APPLY wCurFiscalYear


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
