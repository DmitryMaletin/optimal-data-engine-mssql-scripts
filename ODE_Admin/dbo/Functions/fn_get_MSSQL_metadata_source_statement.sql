CREATE FUNCTION [dbo].[fn_get_MSSQL_metadata_source_statement]
(
	@sourceDatabaseName sysname,
	@sourceDatabaseSchema sysname,
	@sourceDatabaseTable sysname,
	@metadataUse CHAR(3), -- Valid values are hub or stg.
		-- This parameter will switch the ordinal position of a field
		-- between bk_ordinal_position (hub) and satellite_ordinal_position (stg).
	@keyDetectionType VARCHAR(20) -- Valid values are Primary, Unique, None
		-- This determines whether additional filtering conditions are added to the
		-- SQL logic in order to just query for the Primary or Unique keys.

)
/********************************************************************************************
The purpose of this function is to return a SQL statement that can be executed against a source
system database (Microsoft SQL Server) in order to return metadata about the specified source table 
for use in the ODE_Config database.

The eventual output from this generated query will go into the ODE_Config user-defined table type
[dbo].[dv_column_type].

At the moment the query that is generated by this function is used within an open query and so in
order for this to handle the additional layer of string parsing we need to triple escape any
quotation marks used to identify string values.  
TO DO - replace this with an option via parameter.

Use this function to obtain an SQL statement that can be executed against a source database system
in order to obtain metadata for a tables fields, or a tables primary/unique keys.

Example uses
=============
-- Staging tables
SELECT [dbo].[fn_get_MSSQL_metadata_source_statement] ('Sales', 'dbo', 'DiscountType', 'stg', NULL)

-- Hub table (Primary Keys)
SELECT [dbo].[fn_get_MSSQL_metadata_source_statement] ('Sales', 'dbo', 'DiscountType', 'hub', 'Primary')

-- Hub table (Unique Keys)
SELECT [dbo].[fn_get_MSSQL_metadata_source_statement] ('Sales', 'dbo', 'DiscountType', 'hub', 'Unique')

SELECT [dv_scripting].[fn_get_MSSQL_metadata_source_statement] ('Sales', 'dbo', 'DiscountType', 'hub', 'blah')

// NOTE // - The last example for a hub table will return a SQL statement designed to not return
	any records as there are no keys desired.

********************************************************************************************/
RETURNS varchar(4000)
AS
BEGIN
DECLARE @SQL	VARCHAR(MAX) = ''
       ,@crlf	CHAR(2)	= CHAR(13) + CHAR(10)

IF @metadataUse = 'hub'
BEGIN
	-- The following query allows querying of a remote database for metadata about a tables
	-- primary key, or unique index.

	SET @SQL = 'select 
		  col_name(ic.object_id, ic.column_id) as ColumnName
		  ,t.name
		  ,c.max_length
		  ,c.precision
		  ,c.scale
		  ,c.collation_name
		  ,ic.key_ordinal
		  ,0
		  ,0
		  ,''''''''
		  ,''''hub''''	  	  
	from sys.indexes i
	inner join [' + @sourceDatabaseName + '].sys.index_columns ic on i.index_id = ic.index_id and i.object_id = ic.object_id
	inner join [' + @sourceDatabaseName + '].sys.columns c ON c.object_id = ic.object_id and c.column_id = ic.column_id
	inner join [' + @sourceDatabaseName + '].sys.types t ON c.system_type_id = t.system_type_id
	where 1=1' + @crlf

	IF @keyDetectionType = 'Unique'
		SET @SQL = @SQL + 'AND is_unique = 1' + @crlf

	ELSE IF @keyDetectionType = 'Primary'
		SET @SQL = @SQL + 'AND is_primary_key = 1' + @crlf

	ELSE SET @SQL = @SQL + 'AND 1=2' + @crlf


	SET @SQL = @SQL + 'and object_schema_name(ic.Object_Id) = ''''' + @sourceDatabaseSchema + '''''
		and object_name(ic.Object_Id) = ''''' + @sourceDatabaseTable + '''''
		and objectproperty(ic.Object_ID, ''''IsUserTable'''') = 1'
	END

ELSE IF @metadataUse = 'stg'
BEGIN
	SET @SQL = 
	'select [column_name]				= c.[name]
		  ,[column_type]				= t.name
		  ,[column_length]				= c.max_length
		  ,[column_precision]			= c.[precision]
		  ,[column_scale]				= c.[scale]
		  ,[collation_Name]				= c.collation_name
		  ,0
		  ,[source_ordinal_position]    = row_number() over (order by c.column_id)
		  ,0
		  ,''''''''
		  ,''''stg''''
	from            [' + @sourceDatabaseName + '].sys.columns c
	inner join      [' + @sourceDatabaseName + '].sys.objects o
	on c.object_id = o.object_id
	inner join      [' + @sourceDatabaseName + '].sys.schemas s
	on o.schema_id = s.schema_id
	inner join      [' + @sourceDatabaseName + '].sys.types t
	on  c.system_type_id    = t.system_type_id
	and t.is_user_defined   = 0
	and t.user_type_id		= t.system_type_id
	where 1=1
	and o.type in(''''U'''', ''''V'''')
	and s.name = ''''' + @sourceDatabaseSchema + '''''
	and o.name = ''''' + @sourceDatabaseTable + ''''''

END

ELSE
BEGIN
	
	SET @SQL = 'SELECT RAISERROR( ''''Invalid Metadata Use (%s) Provided'''', 16, 1, ''''' + @metadataUse + ''''')';
END

-- Return the resulting SQL Query.
RETURN @SQL

END

GO
